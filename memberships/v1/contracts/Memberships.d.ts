/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MembershipsInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "buy(bytes32,uint256)": FunctionFragment;
    "buyWithAllowlist(bytes32,uint256,bytes32[])": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "claimReferral(bytes32)": FunctionFragment;
    "claimRoll(bytes32)": FunctionFragment;
    "claimUnsoldTokens(bytes32)": FunctionFragment;
    "computeNextScheduleIdForHolder(address)": FunctionFragment;
    "computeReleasableAmount(bytes32)": FunctionFragment;
    "computeScheduleIdForAddressAndIndex(address,uint256)": FunctionFragment;
    "createMintingSchedule((uint256,uint256,bytes32,uint256,address[],uint256[],uint256,(address,uint8),uint256,address,uint256))": FunctionFragment;
    "getIdAtIndex(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSchedule(bytes32)": FunctionFragment;
    "getScheduleByAddressAndIndex(address,uint256)": FunctionFragment;
    "getSchedulesCount()": FunctionFragment;
    "getSchedulesCountByBeneficiary(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAllowlist(bytes32,bytes32)": FunctionFragment;
    "setMinRollFee(uint256)": FunctionFragment;
    "setRollWallet(address)": FunctionFragment;
    "setTokenAllow(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferScheduleOwner(bytes32,address)": FunctionFragment;
    "updateReferral(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithAllowlist",
    values: [BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claimReferral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoll",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnsoldTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextScheduleIdForHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeScheduleIdForAddressAndIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMintingSchedule",
    values: [
      {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduleByAddressAndIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesCountByBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowlist",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRollFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRollWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAllow",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferScheduleOwner",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferral",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimUnsoldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeNextScheduleIdForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMintingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduleByAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesCountByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRollFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRollWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferScheduleOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferral",
    data: BytesLike
  ): Result;

  events: {
    "EventBuy(address,bytes32,address,uint256,uint256)": EventFragment;
    "EventReferralUpdated(address,bytes32,address)": EventFragment;
    "EventScheduleCreated(address,bytes32)": EventFragment;
    "EventScheduleCreatedWithToken(address,bytes32,address)": EventFragment;
    "EventTokenAllowedUpdated(address,address,bool)": EventFragment;
    "Revoked(bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventReferralUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventScheduleCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventScheduleCreatedWithToken"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventTokenAllowedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type EventBuyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    from: string;
    scheduleId: string;
    token: string;
    lots: BigNumber;
    tokens: BigNumber;
  }
>;

export type EventReferralUpdatedEvent = TypedEvent<
  [string, string, string] & {
    from: string;
    scheduleId: string;
    newReferral: string;
  }
>;

export type EventScheduleCreatedEvent = TypedEvent<
  [string, string] & { from: string; scheduleId: string }
>;

export type EventScheduleCreatedWithTokenEvent = TypedEvent<
  [string, string, string] & { from: string; scheduleId: string; token: string }
>;

export type EventTokenAllowedUpdatedEvent = TypedEvent<
  [string, string, boolean] & { from: string; token: string; value: boolean }
>;

export type RevokedEvent = TypedEvent<[string] & { scheduleId: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class Memberships extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MembershipsInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRoll(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeNextScheduleIdForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createMintingSchedule(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSchedule(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          [string, number] & { token: string; assetType: number },
          BigNumber,
          BigNumber
        ] & {
          initialized: boolean;
          revoked: boolean;
          owner: string;
          start: BigNumber;
          duration: BigNumber;
          merkleRoot: string;
          amountTotal: BigNumber;
          released: BigNumber;
          lotToken: string[];
          lotSize: BigNumber[];
          paymentAsset: [string, number] & { token: string; assetType: number };
          pricePerLot: BigNumber;
          rollFee: BigNumber;
        }
      ]
    >;

    getScheduleByAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          [string, number] & { token: string; assetType: number },
          BigNumber,
          BigNumber
        ] & {
          initialized: boolean;
          revoked: boolean;
          owner: string;
          start: BigNumber;
          duration: BigNumber;
          merkleRoot: string;
          amountTotal: BigNumber;
          released: BigNumber;
          lotToken: string[];
          lotSize: BigNumber[];
          paymentAsset: [string, number] & { token: string; assetType: number };
          pricePerLot: BigNumber;
          rollFee: BigNumber;
        }
      ]
    >;

    getSchedulesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinRollFee(
      _minRollFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRollWallet(
      _rollWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAllow(
      _token: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReferral(
      _scheduleId: BytesLike,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  buy(
    scheduleId: BytesLike,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyWithAllowlist(
    scheduleId: BytesLike,
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReferral(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRoll(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimUnsoldTokens(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeNextScheduleIdForHolder(
    holder: string,
    overrides?: CallOverrides
  ): Promise<string>;

  computeReleasableAmount(
    scheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeScheduleIdForAddressAndIndex(
    holder: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createMintingSchedule(
    params: {
      start: BigNumberish;
      duration: BigNumberish;
      merkleRoot: BytesLike;
      amountTotal: BigNumberish;
      lotToken: string[];
      lotSize: BigNumberish[];
      pricePerLot: BigNumberish;
      paymentAsset: { token: string; assetType: BigNumberish };
      rollFee: BigNumberish;
      referral: string;
      referralFee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIdAtIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSchedule(
    scheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      [string, number] & { token: string; assetType: number },
      BigNumber,
      BigNumber
    ] & {
      initialized: boolean;
      revoked: boolean;
      owner: string;
      start: BigNumber;
      duration: BigNumber;
      merkleRoot: string;
      amountTotal: BigNumber;
      released: BigNumber;
      lotToken: string[];
      lotSize: BigNumber[];
      paymentAsset: [string, number] & { token: string; assetType: number };
      pricePerLot: BigNumber;
      rollFee: BigNumber;
    }
  >;

  getScheduleByAddressAndIndex(
    holder: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      [string, number] & { token: string; assetType: number },
      BigNumber,
      BigNumber
    ] & {
      initialized: boolean;
      revoked: boolean;
      owner: string;
      start: BigNumber;
      duration: BigNumber;
      merkleRoot: string;
      amountTotal: BigNumber;
      released: BigNumber;
      lotToken: string[];
      lotSize: BigNumber[];
      paymentAsset: [string, number] & { token: string; assetType: number };
      pricePerLot: BigNumber;
      rollFee: BigNumber;
    }
  >;

  getSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getSchedulesCountByBeneficiary(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowlist(
    scheduleId: BytesLike,
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinRollFee(
    _minRollFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRollWallet(
    _rollWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAllow(
    _token: string,
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferScheduleOwner(
    scheduleId: BytesLike,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReferral(
    _scheduleId: BytesLike,
    _referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRoll(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    computeNextScheduleIdForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<string>;

    computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createMintingSchedule(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSchedule(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        [string, number] & { token: string; assetType: number },
        BigNumber,
        BigNumber
      ] & {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumber;
        duration: BigNumber;
        merkleRoot: string;
        amountTotal: BigNumber;
        released: BigNumber;
        lotToken: string[];
        lotSize: BigNumber[];
        paymentAsset: [string, number] & { token: string; assetType: number };
        pricePerLot: BigNumber;
        rollFee: BigNumber;
      }
    >;

    getScheduleByAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        [string, number] & { token: string; assetType: number },
        BigNumber,
        BigNumber
      ] & {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumber;
        duration: BigNumber;
        merkleRoot: string;
        amountTotal: BigNumber;
        released: BigNumber;
        lotToken: string[];
        lotSize: BigNumber[];
        paymentAsset: [string, number] & { token: string; assetType: number };
        pricePerLot: BigNumber;
        rollFee: BigNumber;
      }
    >;

    getSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revoke(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRollFee(
      _minRollFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRollWallet(
      _rollWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAllow(
      _token: string,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferral(
      _scheduleId: BytesLike,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EventBuy(address,bytes32,address,uint256,uint256)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null,
      lots?: null,
      tokens?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        from: string;
        scheduleId: string;
        token: string;
        lots: BigNumber;
        tokens: BigNumber;
      }
    >;

    EventBuy(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null,
      lots?: null,
      tokens?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        from: string;
        scheduleId: string;
        token: string;
        lots: BigNumber;
        tokens: BigNumber;
      }
    >;

    "EventReferralUpdated(address,bytes32,address)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      newReferral?: null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; newReferral: string }
    >;

    EventReferralUpdated(
      from?: string | null,
      scheduleId?: BytesLike | null,
      newReferral?: null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; newReferral: string }
    >;

    "EventScheduleCreated(address,bytes32)"(
      from?: string | null,
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string, string], { from: string; scheduleId: string }>;

    EventScheduleCreated(
      from?: string | null,
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string, string], { from: string; scheduleId: string }>;

    "EventScheduleCreatedWithToken(address,bytes32,address)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; token: string }
    >;

    EventScheduleCreatedWithToken(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; token: string }
    >;

    "EventTokenAllowedUpdated(address,address,bool)"(
      from?: string | null,
      token?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; token: string; value: boolean }
    >;

    EventTokenAllowedUpdated(
      from?: string | null,
      token?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; token: string; value: boolean }
    >;

    "Revoked(bytes32)"(
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string], { scheduleId: string }>;

    Revoked(
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string], { scheduleId: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRoll(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeNextScheduleIdForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createMintingSchedule(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedule(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduleByAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinRollFee(
      _minRollFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRollWallet(
      _rollWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAllow(
      _token: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReferral(
      _scheduleId: BytesLike,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRoll(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeNextScheduleIdForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createMintingSchedule(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedule(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduleByAddressAndIndex(
      holder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedulesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSchedulesCountByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinRollFee(
      _minRollFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRollWallet(
      _rollWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAllow(
      _token: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReferral(
      _scheduleId: BytesLike,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
