/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MembershipsImplInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MEMBERSHIP_ROLE()": FunctionFragment;
    "_computeReleasableAmount(bytes32)": FunctionFragment;
    "addCampaign((bytes32,uint256,bytes32[],string))": FunctionFragment;
    "buy(address,address,bytes32,uint256,uint256)": FunctionFragment;
    "claim(address,bytes32)": FunctionFragment;
    "claimReferral(address,bytes32)": FunctionFragment;
    "claimRoll(address,address,bytes32)": FunctionFragment;
    "claimUnsoldTokens(address,bytes32)": FunctionFragment;
    "createMintingScheduleValidation((uint256,uint256,bytes32,uint256,address[],uint256[],uint256,(address,uint8),uint256,address,uint256,uint256))": FunctionFragment;
    "getBuyPerWallet(bytes32,address)": FunctionFragment;
    "getCampaignByAddressLength(address)": FunctionFragment;
    "getClaimed(bytes32,uint8)": FunctionFragment;
    "getReferral(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSchedule(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAllowlist(bytes32,bytes32)": FunctionFragment;
    "setBuyPerWallet(bytes32,address,uint256)": FunctionFragment;
    "setClaimed(bytes32,uint8,uint256)": FunctionFragment;
    "setReferral(bytes32,(address,uint256))": FunctionFragment;
    "setSchedule(bytes32,(bool,bool,address,uint256,uint256,bytes32,uint256,uint256,address[],uint256[],(address,uint8),uint256,uint256,uint256))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferScheduleOwner(bytes32,address)": FunctionFragment;
    "updateReferral(bytes32,address)": FunctionFragment;
    "verifyMerkle(address,bytes32,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEMBERSHIP_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_computeReleasableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addCampaign",
    values: [
      {
        campaignId: BytesLike;
        phasesLength: BigNumberish;
        phases: BytesLike[];
        metadata: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReferral",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoll",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnsoldTokens",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMintingScheduleValidation",
    values: [
      {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPerWallet",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignByAddressLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowlist",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyPerWallet",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimed",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferral",
    values: [BytesLike, { referral: string; referralFee: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setSchedule",
    values: [
      BytesLike,
      {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferScheduleOwner",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferral",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkle",
    values: [string, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEMBERSHIP_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimUnsoldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMintingScheduleValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignByAddressLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferScheduleOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkle",
    data: BytesLike
  ): Result;

  events: {
    "EventBuyLot(address,bytes32,uint256)": EventFragment;
    "EventBuyToken(address,bytes32,address,uint256)": EventFragment;
    "EventClaim(address,bytes32,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventBuyLot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventBuyToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type EventBuyLotEvent = TypedEvent<
  [string, string, BigNumber] & {
    from: string;
    scheduleId: string;
    lots: BigNumber;
  }
>;

export type EventBuyTokenEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    from: string;
    scheduleId: string;
    token: string;
    tokens: BigNumber;
  }
>;

export type EventClaimEvent = TypedEvent<
  [string, string, BigNumber] & {
    from: string;
    scheduleId: string;
    value: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class MembershipsImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MembershipsImplInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MEMBERSHIP_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addCampaign(
      value: {
        campaignId: BytesLike;
        phasesLength: BigNumberish;
        phases: BytesLike[];
        metadata: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buy(
      memberships: string,
      caller: string,
      scheduleId: BytesLike,
      amount: BigNumberish,
      msgValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReferral(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRoll(
      memberships: string,
      wallet: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimUnsoldTokens(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMintingScheduleValidation(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[void]>;

    getBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { referral: string; referralFee: BigNumber }]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          [string, number] & { token: string; assetType: number },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          initialized: boolean;
          revoked: boolean;
          owner: string;
          start: BigNumber;
          duration: BigNumber;
          merkleRoot: string;
          amountTotal: BigNumber;
          released: BigNumber;
          lotToken: string[];
          lotSize: BigNumber[];
          paymentAsset: [string, number] & { token: string; assetType: number };
          pricePerLot: BigNumber;
          rollFee: BigNumber;
          maxBuyPerWallet: BigNumber;
        }
      ]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyMerkle(
      caller: string,
      scheduleId: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MEMBERSHIP_ROLE(overrides?: CallOverrides): Promise<string>;

  _computeReleasableAmount(
    scheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addCampaign(
    value: {
      campaignId: BytesLike;
      phasesLength: BigNumberish;
      phases: BytesLike[];
      metadata: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buy(
    memberships: string,
    caller: string,
    scheduleId: BytesLike,
    amount: BigNumberish,
    msgValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    memberships: string,
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReferral(
    memberships: string,
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRoll(
    memberships: string,
    wallet: string,
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimUnsoldTokens(
    memberships: string,
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMintingScheduleValidation(
    params: {
      start: BigNumberish;
      duration: BigNumberish;
      merkleRoot: BytesLike;
      amountTotal: BigNumberish;
      lotToken: string[];
      lotSize: BigNumberish[];
      pricePerLot: BigNumberish;
      paymentAsset: { token: string; assetType: BigNumberish };
      rollFee: BigNumberish;
      referral: string;
      referralFee: BigNumberish;
      maxBuyPerWallet: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<void>;

  getBuyPerWallet(
    scheduleId: BytesLike,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCampaignByAddressLength(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimed(
    scheduleId: BytesLike,
    userType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferral(
    record: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { referral: string; referralFee: BigNumber }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSchedule(
    record: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      [string, number] & { token: string; assetType: number },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      initialized: boolean;
      revoked: boolean;
      owner: string;
      start: BigNumber;
      duration: BigNumber;
      merkleRoot: string;
      amountTotal: BigNumber;
      released: BigNumber;
      lotToken: string[];
      lotSize: BigNumber[];
      paymentAsset: [string, number] & { token: string; assetType: number };
      pricePerLot: BigNumber;
      rollFee: BigNumber;
      maxBuyPerWallet: BigNumber;
    }
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowlist(
    scheduleId: BytesLike,
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyPerWallet(
    scheduleId: BytesLike,
    addr: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimed(
    scheduleId: BytesLike,
    userType: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferral(
    record: BytesLike,
    value: { referral: string; referralFee: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSchedule(
    record: BytesLike,
    value: {
      initialized: boolean;
      revoked: boolean;
      owner: string;
      start: BigNumberish;
      duration: BigNumberish;
      merkleRoot: BytesLike;
      amountTotal: BigNumberish;
      released: BigNumberish;
      lotToken: string[];
      lotSize: BigNumberish[];
      paymentAsset: { token: string; assetType: BigNumberish };
      pricePerLot: BigNumberish;
      rollFee: BigNumberish;
      maxBuyPerWallet: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferScheduleOwner(
    scheduleId: BytesLike,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReferral(
    scheduleId: BytesLike,
    referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyMerkle(
    caller: string,
    scheduleId: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MEMBERSHIP_ROLE(overrides?: CallOverrides): Promise<string>;

    _computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCampaign(
      value: {
        campaignId: BytesLike;
        phasesLength: BigNumberish;
        phases: BytesLike[];
        metadata: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      memberships: string,
      caller: string,
      scheduleId: BytesLike,
      amount: BigNumberish,
      msgValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReferral(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRoll(
      memberships: string,
      wallet: string,
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimUnsoldTokens(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createMintingScheduleValidation(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { referral: string; referralFee: BigNumber }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        [string, number] & { token: string; assetType: number },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumber;
        duration: BigNumber;
        merkleRoot: string;
        amountTotal: BigNumber;
        released: BigNumber;
        lotToken: string[];
        lotSize: BigNumber[];
        paymentAsset: [string, number] & { token: string; assetType: number };
        pricePerLot: BigNumber;
        rollFee: BigNumber;
        maxBuyPerWallet: BigNumber;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revoke(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMerkle(
      caller: string,
      scheduleId: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EventBuyLot(address,bytes32,uint256)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      lots?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; scheduleId: string; lots: BigNumber }
    >;

    EventBuyLot(
      from?: string | null,
      scheduleId?: BytesLike | null,
      lots?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; scheduleId: string; lots: BigNumber }
    >;

    "EventBuyToken(address,bytes32,address,uint256)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null,
      tokens?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { from: string; scheduleId: string; token: string; tokens: BigNumber }
    >;

    EventBuyToken(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null,
      tokens?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { from: string; scheduleId: string; token: string; tokens: BigNumber }
    >;

    "EventClaim(address,bytes32,uint256)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; scheduleId: string; value: BigNumber }
    >;

    EventClaim(
      from?: string | null,
      scheduleId?: BytesLike | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; scheduleId: string; value: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MEMBERSHIP_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCampaign(
      value: {
        campaignId: BytesLike;
        phasesLength: BigNumberish;
        phases: BytesLike[];
        metadata: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buy(
      memberships: string,
      caller: string,
      scheduleId: BytesLike,
      amount: BigNumberish,
      msgValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReferral(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRoll(
      memberships: string,
      wallet: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimUnsoldTokens(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMintingScheduleValidation(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyMerkle(
      caller: string,
      scheduleId: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MEMBERSHIP_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _computeReleasableAmount(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCampaign(
      value: {
        campaignId: BytesLike;
        phasesLength: BigNumberish;
        phases: BytesLike[];
        metadata: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      memberships: string,
      caller: string,
      scheduleId: BytesLike,
      amount: BigNumberish,
      msgValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReferral(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRoll(
      memberships: string,
      wallet: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimUnsoldTokens(
      memberships: string,
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMintingScheduleValidation(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyPerWallet(
      scheduleId: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimed(
      scheduleId: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyMerkle(
      caller: string,
      scheduleId: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
