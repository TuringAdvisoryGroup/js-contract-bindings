/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ManagerInterface extends ethers.utils.Interface {
  functions: {
    "RegistryInstance()": FunctionFragment;
    "TokenFactoryInstance()": FunctionFragment;
    "approveProposal(bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "migrateManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "parseAddr(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPlatformWallet(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setTokenFactory(address)": FunctionFragment;
    "setTokenVesting(address)": FunctionFragment;
    "setVestingAddress(address,address)": FunctionFragment;
    "setVestingReferral(address,address)": FunctionFragment;
    "submitProposal(string,string,uint8,uint256,uint8,uint256,address,uint8)": FunctionFragment;
    "submitReferral(bytes32,address,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "RegistryInstance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TokenFactoryInstance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseAddr",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenVesting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingReferral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReferral",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "RegistryInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokenFactoryInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LogManagerMigrated(address)": EventFragment;
    "LogRegistryChanged(address,address)": EventFragment;
    "LogTokenFactoryChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogManagerMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRegistryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogManagerMigratedEvent = TypedEvent<
  [string] & { newManager: string }
>;

export type LogRegistryChangedEvent = TypedEvent<
  [string, string] & { oldR: string; newR: string }
>;

export type LogTokenFactoryChangedEvent = TypedEvent<
  [string, string] & { oldTF: string; newTF: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Manager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ManagerInterface;

  functions: {
    RegistryInstance(overrides?: CallOverrides): Promise<[string]>;

    TokenFactoryInstance(overrides?: CallOverrides): Promise<[string]>;

    approveProposal(
      _hashIndex: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _tokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    migrateManager(
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parseAddr(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { parsed: string }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformWallet(
      _newPlatformWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _newRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenFactory(
      _newTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenVesting(
      _newTokenVesting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingAddress(
      _token: string,
      _vestingBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingReferral(
      _token: string,
      _vestingReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _totalSupply: BigNumberish,
      _initialPercentage: BigNumberish,
      _vestingPeriodInDays: BigNumberish,
      _vestingBeneficiary: string,
      _initialPlatformPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitReferral(
      _hashIndex: BytesLike,
      _referral: string,
      _referralPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  RegistryInstance(overrides?: CallOverrides): Promise<string>;

  TokenFactoryInstance(overrides?: CallOverrides): Promise<string>;

  approveProposal(
    _hashIndex: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _tokenFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  migrateManager(
    _newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  parseAddr(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformWallet(
    _newPlatformWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _newRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenFactory(
    _newTokenFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenVesting(
    _newTokenVesting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingAddress(
    _token: string,
    _vestingBeneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingReferral(
    _token: string,
    _vestingReferral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _totalSupply: BigNumberish,
    _initialPercentage: BigNumberish,
    _vestingPeriodInDays: BigNumberish,
    _vestingBeneficiary: string,
    _initialPlatformPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitReferral(
    _hashIndex: BytesLike,
    _referral: string,
    _referralPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RegistryInstance(overrides?: CallOverrides): Promise<string>;

    TokenFactoryInstance(overrides?: CallOverrides): Promise<string>;

    approveProposal(
      _hashIndex: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: string,
      _tokenFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    migrateManager(
      _newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    parseAddr(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPlatformWallet(
      _newPlatformWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(_newRegistry: string, overrides?: CallOverrides): Promise<void>;

    setTokenFactory(
      _newTokenFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenVesting(
      _newTokenVesting: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingAddress(
      _token: string,
      _vestingBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingReferral(
      _token: string,
      _vestingReferral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _totalSupply: BigNumberish,
      _initialPercentage: BigNumberish,
      _vestingPeriodInDays: BigNumberish,
      _vestingBeneficiary: string,
      _initialPlatformPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    submitReferral(
      _hashIndex: BytesLike,
      _referral: string,
      _referralPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogManagerMigrated(address)"(
      newManager?: string | null
    ): TypedEventFilter<[string], { newManager: string }>;

    LogManagerMigrated(
      newManager?: string | null
    ): TypedEventFilter<[string], { newManager: string }>;

    "LogRegistryChanged(address,address)"(
      oldR?: null,
      newR?: null
    ): TypedEventFilter<[string, string], { oldR: string; newR: string }>;

    LogRegistryChanged(
      oldR?: null,
      newR?: null
    ): TypedEventFilter<[string, string], { oldR: string; newR: string }>;

    "LogTokenFactoryChanged(address,address)"(
      oldTF?: null,
      newTF?: null
    ): TypedEventFilter<[string, string], { oldTF: string; newTF: string }>;

    LogTokenFactoryChanged(
      oldTF?: null,
      newTF?: null
    ): TypedEventFilter<[string, string], { oldTF: string; newTF: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    RegistryInstance(overrides?: CallOverrides): Promise<BigNumber>;

    TokenFactoryInstance(overrides?: CallOverrides): Promise<BigNumber>;

    approveProposal(
      _hashIndex: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _tokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    migrateManager(
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parseAddr(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformWallet(
      _newPlatformWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _newRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenFactory(
      _newTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenVesting(
      _newTokenVesting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingAddress(
      _token: string,
      _vestingBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingReferral(
      _token: string,
      _vestingReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitProposal(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _totalSupply: BigNumberish,
      _initialPercentage: BigNumberish,
      _vestingPeriodInDays: BigNumberish,
      _vestingBeneficiary: string,
      _initialPlatformPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitReferral(
      _hashIndex: BytesLike,
      _referral: string,
      _referralPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RegistryInstance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TokenFactoryInstance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveProposal(
      _hashIndex: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _tokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateManager(
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseAddr(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformWallet(
      _newPlatformWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _newRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenFactory(
      _newTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenVesting(
      _newTokenVesting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingAddress(
      _token: string,
      _vestingBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingReferral(
      _token: string,
      _vestingReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _totalSupply: BigNumberish,
      _initialPercentage: BigNumberish,
      _vestingPeriodInDays: BigNumberish,
      _vestingBeneficiary: string,
      _initialPlatformPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitReferral(
      _hashIndex: BytesLike,
      _referral: string,
      _referralPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
