/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenVestingInterface extends ethers.utils.Interface {
  functions: {
    "DAYS_IN_SECONDS()": FunctionFragment;
    "addToken(address,address[3],uint256[3],uint256)": FunctionFragment;
    "beneficiaries(address,uint256)": FunctionFragment;
    "beneficiaryTokens(address,uint256)": FunctionFragment;
    "getAllTokensByBeneficiary(address)": FunctionFragment;
    "getVestingInfo(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "release(address,address)": FunctionFragment;
    "releaseAll(address)": FunctionFragment;
    "releaseableAmount(address)": FunctionFragment;
    "releaseableAmountByAddress(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSablier(address)": FunctionFragment;
    "setVestingAddress(address,address,address)": FunctionFragment;
    "setVestingReferral(address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestedAmount(address)": FunctionFragment;
    "vestingInfo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAYS_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      string,
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokensByBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "releaseAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseableAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseableAmountByAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setSablier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVestingAddress",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingReferral",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vestingInfo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DAYS_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokensByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "releaseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseableAmountByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSablier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVestingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingInfo",
    data: BytesLike
  ): Result;

  events: {
    "LogBeneficiaryUpdated(address,address)": EventFragment;
    "LogTokenAdded(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Released(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBeneficiaryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
}

export type LogBeneficiaryUpdatedEvent = TypedEvent<
  [string, string] & { token: string; vestingBeneficiary: string }
>;

export type LogTokenAddedEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    vestingBeneficiary: string;
    vestingPeriodInDays: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReleasedEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    vestingBeneficiary: string;
    amount: BigNumber;
  }
>;

export class TokenVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenVestingInterface;

  functions: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToken(
      _token: string,
      _beneficiaries: [string, string, string],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      _vestingPeriodInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiaries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        proportion: BigNumber;
        streamId: BigNumber;
        remaining: BigNumber;
      }
    >;

    beneficiaryTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllTokensByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getVestingInfo(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          vestingBeneficiary: string;
          totalBalance: BigNumber;
          beneficiariesCount: BigNumber;
          start: BigNumber;
          stop: BigNumber;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      _token: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseAll(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseableAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    releaseableAmountByAddress(
      _token: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSablier(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingAddress(
      _vestingBeneficiary: string,
      _token: string,
      _newVestingBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingReferral(
      _vestingBeneficiary: string,
      _token: string,
      _vestingReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestedAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestingInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        totalBalance: BigNumber;
        beneficiariesCount: BigNumber;
        start: BigNumber;
        stop: BigNumber;
      }
    >;
  };

  DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  addToken(
    _token: string,
    _beneficiaries: [string, string, string],
    _proportions: [BigNumberish, BigNumberish, BigNumberish],
    _vestingPeriodInDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiaries(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      beneficiary: string;
      proportion: BigNumber;
      streamId: BigNumber;
      remaining: BigNumber;
    }
  >;

  beneficiaryTokens(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllTokensByBeneficiary(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVestingInfo(
    _token: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      vestingBeneficiary: string;
      totalBalance: BigNumber;
      beneficiariesCount: BigNumber;
      start: BigNumber;
      stop: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    _token: string,
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseAll(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseableAmount(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  releaseableAmountByAddress(
    _token: string,
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSablier(
    _sablier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingAddress(
    _vestingBeneficiary: string,
    _token: string,
    _newVestingBeneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingReferral(
    _vestingBeneficiary: string,
    _token: string,
    _vestingReferral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestedAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  vestingInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      vestingBeneficiary: string;
      totalBalance: BigNumber;
      beneficiariesCount: BigNumber;
      start: BigNumber;
      stop: BigNumber;
    }
  >;

  callStatic: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToken(
      _token: string,
      _beneficiaries: [string, string, string],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      _vestingPeriodInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beneficiaries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        proportion: BigNumber;
        streamId: BigNumber;
        remaining: BigNumber;
      }
    >;

    beneficiaryTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllTokensByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVestingInfo(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        totalBalance: BigNumber;
        beneficiariesCount: BigNumber;
        start: BigNumber;
        stop: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    release(
      _token: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseAll(_beneficiary: string, overrides?: CallOverrides): Promise<void>;

    releaseableAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseableAmountByAddress(
      _token: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSablier(_sablier: string, overrides?: CallOverrides): Promise<void>;

    setVestingAddress(
      _vestingBeneficiary: string,
      _token: string,
      _newVestingBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingReferral(
      _vestingBeneficiary: string,
      _token: string,
      _vestingReferral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestedAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestingInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        totalBalance: BigNumber;
        beneficiariesCount: BigNumber;
        start: BigNumber;
        stop: BigNumber;
      }
    >;
  };

  filters: {
    "LogBeneficiaryUpdated(address,address)"(
      token?: string | null,
      vestingBeneficiary?: null
    ): TypedEventFilter<
      [string, string],
      { token: string; vestingBeneficiary: string }
    >;

    LogBeneficiaryUpdated(
      token?: string | null,
      vestingBeneficiary?: null
    ): TypedEventFilter<
      [string, string],
      { token: string; vestingBeneficiary: string }
    >;

    "LogTokenAdded(address,address,uint256)"(
      token?: string | null,
      vestingBeneficiary?: null,
      vestingPeriodInDays?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {
        token: string;
        vestingBeneficiary: string;
        vestingPeriodInDays: BigNumber;
      }
    >;

    LogTokenAdded(
      token?: string | null,
      vestingBeneficiary?: null,
      vestingPeriodInDays?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {
        token: string;
        vestingBeneficiary: string;
        vestingPeriodInDays: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Released(address,address,uint256)"(
      token?: string | null,
      vestingBeneficiary?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; vestingBeneficiary: string; amount: BigNumber }
    >;

    Released(
      token?: string | null,
      vestingBeneficiary?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; vestingBeneficiary: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToken(
      _token: string,
      _beneficiaries: [string, string, string],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      _vestingPeriodInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiaries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllTokensByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingInfo(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      _token: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseAll(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseableAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseableAmountByAddress(
      _token: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSablier(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingAddress(
      _vestingBeneficiary: string,
      _token: string,
      _newVestingBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingReferral(
      _vestingBeneficiary: string,
      _token: string,
      _vestingReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestedAmount(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestingInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToken(
      _token: string,
      _beneficiaries: [string, string, string],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      _vestingPeriodInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiaries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllTokensByBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingInfo(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      _token: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseAll(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseableAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseableAmountByAddress(
      _token: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSablier(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingAddress(
      _vestingBeneficiary: string,
      _token: string,
      _newVestingBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingReferral(
      _vestingBeneficiary: string,
      _token: string,
      _vestingReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestedAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
